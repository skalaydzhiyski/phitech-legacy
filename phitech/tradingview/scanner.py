from __future__ import annotations

import json
from enum import Enum
from typing import Iterable

import requests
import pandas as pd


URL = "https://scanner.tradingview.com/america/scan"
HEADERS = {
    "authority": "scanner.tradingview.com",
    "sec-ch-ua": '" Not A;Brand";v="99", "Chromium";v="98", "Google Chrome";v="98"',
    "accept": "text/plain, */*; q=0.01",
    "content-type": "application/x-www-form-urlencoded; charset=UTF-8",
    "sec-ch-ua-mobile": "?0",
    "user-agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) "
    "Chrome/98.0.4758.102 Safari/537.36",
    "sec-ch-ua-platform": '"Windows"',
    "origin": "https://www.tradingview.com",
    "sec-fetch-site": "same-site",
    "sec-fetch-mode": "cors",
    "sec-fetch-dest": "empty",
    "referer": "https://www.tradingview.com/",
    "accept-language": "en-US,en;q=0.9,it;q=0.8",
}
COLUMN_MAPPING = {
    "High.1M": "1-Month High",
    "Low.1M": "1-Month Low",
    "beta_1_year": "1-Year Beta",
    "High.3M": "3-Month High",
    "Low.3M": "3-Month Low",
    "Perf.3M": "3-Month Performance",
    "price_52_week_high": "52 Week High",
    "price_52_week_low": "52 Week Low",
    "Perf.5Y": "5Y Performance",
    "High.6M": "6-Month High",
    "Low.6M": "6-Month Low",
    "Perf.6M": "6-Month Performance",
    "High.All": "All Time High",
    "Low.All": "All Time Low",
    "Perf.All": "All Time Performance",
    "Aroon.Down": "Aroon Down (14)",
    "Aroon.Up": "Aroon Up (14)",
    "ADR": "Average Day Range (14)",
    "ADX": "Average Directional Index (14)",
    "ATR": "Average True Range (14)",
    "average_volume_10d_calc": "average_volume_10d_calc",
    "average_volume_30d_calc": "average_volume_30d_calc",
    "average_volume_60d_calc": "average_volume_60d_calc",
    "average_volume_90d_calc": "average_volume_90d_calc",
    "AO": "Awesome Oscillator",
    "basic_eps_net_income": "Basic EPS (FY)",
    "earnings_per_share_basic_ttm": "Basic EPS (TTM)",
    "BB.lower": "Bollinger Lower Band (20)",
    "BB.upper": "Bollinger Upper Band (20)",
    "BBPower": "Bull Bear Power",
    "cash_n_equivalents_fy": "Cash & Equivalents (FY)",
    "cash_n_equivalents_fq": "Cash & Equivalents (MRQ)",
    "cash_n_short_term_invest_fy": "Cash and short term investments (FY)",
    "cash_n_short_term_invest_fq": "Cash and short term investments (MRQ)",
    "ChaikinMoneyFlow": "Chaikin Money Flow (20)",
    "change_abs": "Change",
    "change": "Change %",
    "change_abs.15": "Change 15m",
    "change.15": "Change 15m, %",
    "change_abs.60": "Change 1h",
    "change.60": "Change 1h, %",
    "change_abs.1": "Change 1m",
    "change_abs.1M": "Change 1M",
    "change.1": "Change 1m, %",
    "change.1M": "Change 1M, %",
    "change_abs.1W": "Change 1W",
    "change.1W": "Change 1W, %",
    "change_abs.240": "Change 4h",
    "change.240": "Change 4h, %",
    "change_abs.5": "Change 5m",
    "change.5": "Change 5m, %",
    "change_from_open_abs": "Change from Open",
    "change_from_open": "Change from Open %",
    "CCI20": "Commodity Channel Index (20)",
    "country": "Country",
    "current_ratio": "Current Ratio (MRQ)",
    "debt_to_equity": "Debt to Equity Ratio (MRQ)",
    "dividend_yield_recent": "Dividend Yield Forward",
    "dividends_paid": "Dividends Paid (FY)",
    "dps_common_stock_prim_issue_yoy_growth_fy": "Dividends per share (Annual YoY Growth)",
    "dps_common_stock_prim_issue_fy": "Dividends per Share (FY)",
    "dividends_per_share_fq": "Dividends per Share (MRQ)",
    "DonchCh20.Lower": "Donchian Channels Lower Band (20)",
    "DonchCh20.Upper": "Donchian Channels Upper Band (20)",
    "ebitda_yoy_growth_fy": "EBITDA (Annual YoY Growth)",
    "ebitda_qoq_growth_fq": "EBITDA (Quarterly QoQ Growth)",
    "ebitda_yoy_growth_fq": "EBITDA (Quarterly YoY Growth)",
    "ebitda_yoy_growth_ttm": "EBITDA (TTM YoY Growth)",
    "ebitda": "EBITDA (TTM)",
    "enterprise_value_fq": "Enterprise Value (MRQ)",
    "enterprise_value_ebitda_ttm": "Enterprise Value/EBITDA (TTM)",
    "earnings_per_share_diluted_yoy_growth_fy": "EPS Diluted (Annual YoY Growth)",
    "last_annual_eps": "EPS Diluted (FY)",
    "earnings_per_share_fq": "EPS Diluted (MRQ)",
    "earnings_per_share_diluted_qoq_growth_fq": "EPS Diluted (Quarterly QoQ Growth)",
    "earnings_per_share_diluted_yoy_growth_fq": "EPS Diluted (Quarterly YoY Growth)",
    "earnings_per_share_diluted_yoy_growth_ttm": "EPS Diluted (TTM YoY Growth)",
    "earnings_per_share_diluted_ttm": "EPS Diluted (TTM)",
    "earnings_per_share_forecast_next_fq": "EPS Forecast (MRQ)",
    "exchange": "Exchange",
    "EMA10": "Exponential Moving Average (10)",
    "EMA100": "Exponential Moving Average (100)",
    "EMA20": "Exponential Moving Average (20)",
    "EMA200": "Exponential Moving Average (200)",
    "EMA30": "Exponential Moving Average (30)",
    "EMA5": "Exponential Moving Average (5)",
    "EMA50": "Exponential Moving Average (50)",
    "free_cash_flow_yoy_growth_fy": "Free Cash Flow (Annual YoY Growth)",
    "free_cash_flow_qoq_growth_fq": "Free Cash Flow (Quarterly QoQ Growth)",
    "free_cash_flow_yoy_growth_fq": "Free Cash Flow (Quarterly YoY Growth)",
    "free_cash_flow_yoy_growth_ttm": "Free Cash Flow (TTM YoY Growth)",
    "free_cash_flow_margin_fy": "Free Cash Flow Margin (FY)",
    "free_cash_flow_margin_ttm": "Free Cash Flow Margin (TTM)",
    "gap": "Gap %",
    "goodwill": "Goodwill",
    "gross_profit_margin_fy": "Gross Margin (FY)",
    "gross_margin": "Gross Margin (TTM)",
    "gross_profit_yoy_growth_fy": "Gross Profit (Annual YoY Growth)",
    "gross_profit": "Gross Profit (FY)",
    "gross_profit_fq": "Gross Profit (MRQ)",
    "gross_profit_qoq_growth_fq": "Gross Profit (Quarterly QoQ Growth)",
    "gross_profit_yoy_growth_fq": "Gross Profit (Quarterly YoY Growth)",
    "gross_profit_yoy_growth_ttm": "Gross Profit (TTM YoY Growth)",
    "high": "High",
    "HullMA9": "Hull Moving Average (9)",
    "Ichimoku.BLine": "Ichimoku Base Line (9, 26, 52, 26)",
    "Ichimoku.CLine": "Ichimoku Conversion Line (9, 26, 52, 26)",
    "Ichimoku.Lead1": "Ichimoku Leading Span A (9, 26, 52, 26)",
    "Ichimoku.Lead2": "Ichimoku Leading Span B (9, 26, 52, 26)",
    "industry": "Industry",
    "KltChnl.lower": "Keltner Channels Lower Band (20)",
    "KltChnl.upper": "Keltner Channels Upper Band (20)",
    "last_annual_revenue": "Last Year Revenue (FY)",
    "low": "Low",
    "MACD.macd": "MACD Level (12, 26)",
    "MACD.signal": "MACD Signal (12, 26)",
    "market_cap_basic": "Market Capitalization",
    "Mom": "Momentum (10)",
    "MoneyFlow": "Money Flow (14)",
    "Perf.1M": "Monthly Performance",
    "Recommend.MA": "Moving Averages Rating",
    "ADX-DI": "Negative Directional Indicator (14)",
    "net_debt": "Net Debt (MRQ)",
    "net_income_yoy_growth_fy": "Net Income (Annual YoY Growth)",
    "net_income": "Net Income (FY)",
    "net_income_qoq_growth_fq": "Net Income (Quarterly QoQ Growth)",
    "net_income_yoy_growth_fq": "Net Income (Quarterly YoY Growth)",
    "net_income_yoy_growth_ttm": "Net Income (TTM YoY Growth)",
    "net_income_bef_disc_oper_margin_fy": "Net Margin (FY)",
    "after_tax_margin": "Net Margin (TTM)",
    "number_of_employees": "Number of Employees",
    "number_of_shareholders": "Number of Shareholders",
    "open": "Open",
    "oper_income_margin_fy": "Operating Margin (FY)",
    "operating_margin": "Operating Margin (TTM)",
    "Recommend.Other": "Oscillators Rating",
    "P.SAR": "Parabolic SAR",
    "candlestick": "Pattern",
    "Pivot.M.Camarilla.Middle": "Pivot Camarilla P",
    "Pivot.M.Camarilla.R1": "Pivot Camarilla R1",
    "Pivot.M.Camarilla.R2": "Pivot Camarilla R2",
    "Pivot.M.Camarilla.R3": "Pivot Camarilla R3",
    "Pivot.M.Camarilla.S1": "Pivot Camarilla S1",
    "Pivot.M.Camarilla.S2": "Pivot Camarilla S2",
    "Pivot.M.Camarilla.S3": "Pivot Camarilla S3",
    "Pivot.M.Classic.Middle": "Pivot Classic P",
    "Pivot.M.Classic.R1": "Pivot Classic R1",
    "Pivot.M.Classic.R2": "Pivot Classic R2",
    "Pivot.M.Classic.R3": "Pivot Classic R3",
    "Pivot.M.Classic.S1": "Pivot Classic S1",
    "Pivot.M.Classic.S2": "Pivot Classic S2",
    "Pivot.M.Classic.S3": "Pivot Classic S3",
    "Pivot.M.Demark.Middle": "Pivot DM P",
    "Pivot.M.Demark.R1": "Pivot DM R1",
    "Pivot.M.Demark.S1": "Pivot DM S1",
    "Pivot.M.Fibonacci.Middle": "Pivot Fibonacci P",
    "Pivot.M.Fibonacci.R1": "Pivot Fibonacci R1",
    "Pivot.M.Fibonacci.R2": "Pivot Fibonacci R2",
    "Pivot.M.Fibonacci.R3": "Pivot Fibonacci R3",
    "Pivot.M.Fibonacci.S1": "Pivot Fibonacci S1",
    "Pivot.M.Fibonacci.S2": "Pivot Fibonacci S2",
    "Pivot.M.Fibonacci.S3": "Pivot Fibonacci S3",
    "Pivot.M.Woodie.Middle": "Pivot Woodie P",
    "Pivot.M.Woodie.R1": "Pivot Woodie R1",
    "Pivot.M.Woodie.R2": "Pivot Woodie R2",
    "Pivot.M.Woodie.R3": "Pivot Woodie R3",
    "Pivot.M.Woodie.S1": "Pivot Woodie S1",
    "Pivot.M.Woodie.S2": "Pivot Woodie S2",
    "Pivot.M.Woodie.S3": "Pivot Woodie S3",
    "ADX+DI": "Positive Directional Indicator (14)",
    "postmarket_change_abs": "Post-market Change",
    "postmarket_change": "Post-market Change %",
    "postmarket_close": "Post-market Close",
    "postmarket_high": "Post-market High",
    "postmarket_low": "Post-market Low",
    "postmarket_open": "Post-market Open",
    "postmarket_volume": "Post-market Volume",
    "premarket_change_abs": "Pre-market Change",
    "premarket_change": "Pre-market Change %",
    "premarket_change_from_open_abs": "Pre-market Change from Open",
    "premarket_change_from_open": "Pre-market Change from Open %",
    "premarket_close": "Pre-market Close",
    "premarket_gap": "Pre-market Gap %",
    "premarket_high": "Pre-market High",
    "premarket_low": "Pre-market Low",
    "premarket_open": "Pre-market Open",
    "premarket_volume": "Pre-market Volume",
    "pre_tax_margin": "Pretax Margin (TTM)",
    "close": "Price",
    "price_book_ratio": "Price to Book (FY)",
    "price_book_fq": "Price to Book (MRQ)",
    "price_earnings_ttm": "Price to Earnings Ratio (TTM)",
    "price_free_cash_flow_ttm": "Price to Free Cash Flow (TTM)",
    "price_revenue_ttm": "Price to Revenue Ratio (TTM)",
    "price_sales_ratio": "Price to Sales (FY)",
    "quick_ratio": "Quick Ratio (MRQ)",
    "ROC": "Rate Of Change (9)",
    "earnings_release_date": "Recent Earnings Date",
    "RSI": "Relative Strength Index (14)",
    "RSI7": "Relative Strength Index (7)",
    "relative_volume_10d_calc": "Relative Volume",
    "relative_volume_intraday|5": "Relative Volume at Time",
    "research_and_dev_ratio_fy": "Research & development Ratio (FY)",
    "research_and_dev_ratio_ttm": "Research & development Ratio (TTM)",
    "return_on_assets": "Return on Assets (TTM)",
    "return_on_equity": "Return on Equity (TTM)",
    "return_on_invested_capital": "Return on Invested Capital (TTM)",
    "total_revenue_yoy_growth_fy": "Revenue (Annual YoY Growth)",
    "total_revenue_qoq_growth_fq": "Revenue (Quarterly QoQ Growth)",
    "total_revenue_yoy_growth_fq": "Revenue (Quarterly YoY Growth)",
    "total_revenue_yoy_growth_ttm": "Revenue (TTM YoY Growth)",
    "revenue_per_employee": "Revenue per Employee (FY)",
    "sector": "Sector",
    "sell_gen_admin_exp_other_ratio_fy": "Selling General & Admin expenses Ratio (FY)",
    "sell_gen_admin_exp_other_ratio_ttm": "Selling General & Admin expenses Ratio (TTM)",
    "float_shares_outstanding": "Shares Float",
    "SMA10": "Simple Moving Average (10)",
    "SMA100": "Simple Moving Average (100)",
    "SMA20": "Simple Moving Average (20)",
    "SMA200": "Simple Moving Average (200)",
    "SMA30": "Simple Moving Average (30)",
    "SMA5": "Simple Moving Average (5)",
    "SMA50": "Simple Moving Average (50)",
    "Stoch.D": "Stochastic %D (14, 3, 3)",
    "Stoch.K": "Stochastic %K (14, 3, 3)",
    "Stoch.RSI.K": "Stochastic RSI Fast (3, 3, 14, 14)",
    "Stoch.RSI.D": "Stochastic RSI Slow (3, 3, 14, 14)",
    "submarket": "Submarket",
    "Recommend.All": "Technical Rating",
    "total_assets_yoy_growth_fy": "Total Assets (Annual YoY Growth)",
    "total_assets": "Total Assets (MRQ)",
    "total_assets_qoq_growth_fq": "Total Assets (Quarterly QoQ Growth)",
    "total_assets_yoy_growth_fq": "Total Assets (Quarterly YoY Growth)",
    "total_current_assets": "Total Current Assets (MRQ)",
    "total_debt_yoy_growth_fy": "Total Debt (Annual YoY Growth)",
    "total_debt": "Total Debt (MRQ)",
    "total_debt_qoq_growth_fq": "Total Debt (Quarterly QoQ Growth)",
    "total_debt_yoy_growth_fq": "Total Debt (Quarterly YoY Growth)",
    "total_liabilities_fy": "Total Liabilities (FY)",
    "total_liabilities_fq": "Total Liabilities (MRQ)",
    "total_revenue": "Total Revenue (FY)",
    "total_shares_outstanding_fundamental": "Total Shares Outstanding",
    "UO": "Ultimate Oscillator (7, 14, 28)",
    "earnings_release_next_date": "Upcoming Earnings Date",
    "Volatility.D": "Volatility",
    "Volatility.M": "Volatility Month",
    "Volatility.W": "Volatility Week",
    "volume": "Volume",
    "VWAP": "Volume Weighted Average Price",
    "VWMA": "Volume Weighted Moving Average (20)",
    "Value.Traded": "Volume*Price",
    "Perf.W": "Weekly Performance",
    "W.R": "Williams Percent Range (14)",
    "Perf.Y": "Yearly Performance",
    "Perf.YTD": "YTD Performance",
    "type": "type",
    "subtype": "subtype",
    "name": "name",
    "logoid": "logoid",
    "description": "description",
}
COLUMNS = {
    "High.1M": "High.1M",
    "Low.1M": "Low.1M",
    "beta_1_year": "beta_1_year",
    "High.3M": "High.3M",
    "Low.3M": "Low.3M",
    "Perf.3M": "Perf.3M",
    "price_52_week_high": "price_52_week_high",
    "price_52_week_low": "price_52_week_low",
    "Perf.5Y": "Perf.5Y",
    "High.6M": "High.6M",
    "Low.6M": "Low.6M",
    "Perf.6M": "Perf.6M",
    "High.All": "High.All",
    "Low.All": "Low.All",
    "Perf.All": "Perf.All",
    "Aroon.Down": "Aroon.Down",
    "Aroon.Up": "Aroon.Up",
    "ADR": "ADR",
    "ADX": "ADX",
    "ATR": "ATR",
    "average_volume_10d_calc": "average_volume_10d_calc",
    "average_volume_30d_calc": "average_volume_30d_calc",
    "average_volume_60d_calc": "average_volume_60d_calc",
    "average_volume_90d_calc": "average_volume_90d_calc",
    "AO": "AO",
    "basic_eps_net_income": "basic_eps_net_income",
    "earnings_per_share_basic_ttm": "earnings_per_share_basic_ttm",
    "BB.lower": "BB.lower",
    "BB.upper": "BB.upper",
    "BBPower": "BBPower",
    "cash_n_equivalents_fy": "cash_n_equivalents_fy",
    "cash_n_equivalents_fq": "cash_n_equivalents_fq",
    "cash_n_short_term_invest_fy": "cash_n_short_term_invest_fy",
    "cash_n_short_term_invest_fq": "cash_n_short_term_invest_fq",
    "ChaikinMoneyFlow": "ChaikinMoneyFlow",
    "change_abs": "change_abs",
    "change": "change",
    "change_abs.15": "change_abs.15",
    "change.15": "change.15",
    "change_abs.60": "change_abs.60",
    "change.60": "change.60",
    "change_abs.1": "change_abs.1",
    "change_abs.1M": "change_abs.1M",
    "change.1": "change.1",
    "change.1M": "change.1M",
    "change_abs.1W": "change_abs.1W",
    "change.1W": "change.1W",
    "change_abs.240": "change_abs.240",
    "change.240": "change.240",
    "change_abs.5": "change_abs.5",
    "change.5": "change.5",
    "change_from_open_abs": "change_from_open_abs",
    "change_from_open": "change_from_open",
    "CCI20": "CCI20",
    "country": "country",
    "current_ratio": "current_ratio",
    "debt_to_equity": "debt_to_equity",
    "dividend_yield_recent": "dividend_yield_recent",
    "dividends_paid": "dividends_paid",
    "dps_common_stock_prim_issue_yoy_growth_fy": "dps_common_stock_prim_issue_yoy_growth_fy",
    "dps_common_stock_prim_issue_fy": "dps_common_stock_prim_issue_fy",
    "dividends_per_share_fq": "dividends_per_share_fq",
    "DonchCh20.Lower": "DonchCh20.Lower",
    "DonchCh20.Upper": "DonchCh20.Upper",
    "ebitda_yoy_growth_fy": "ebitda_yoy_growth_fy",
    "ebitda_qoq_growth_fq": "ebitda_qoq_growth_fq",
    "ebitda_yoy_growth_fq": "ebitda_yoy_growth_fq",
    "ebitda_yoy_growth_ttm": "ebitda_yoy_growth_ttm",
    "ebitda": "ebitda",
    "enterprise_value_fq": "enterprise_value_fq",
    "enterprise_value_ebitda_ttm": "enterprise_value_ebitda_ttm",
    "earnings_per_share_diluted_yoy_growth_fy": "earnings_per_share_diluted_yoy_growth_fy",
    "last_annual_eps": "last_annual_eps",
    "earnings_per_share_fq": "earnings_per_share_fq",
    "earnings_per_share_diluted_qoq_growth_fq": "earnings_per_share_diluted_qoq_growth_fq",
    "earnings_per_share_diluted_yoy_growth_fq": "earnings_per_share_diluted_yoy_growth_fq",
    "earnings_per_share_diluted_yoy_growth_ttm": "earnings_per_share_diluted_yoy_growth_ttm",
    "earnings_per_share_diluted_ttm": "earnings_per_share_diluted_ttm",
    "earnings_per_share_forecast_next_fq": "earnings_per_share_forecast_next_fq",
    "exchange": "exchange",
    "EMA10": "EMA10",
    "EMA100": "EMA100",
    "EMA20": "EMA20",
    "EMA200": "EMA200",
    "EMA30": "EMA30",
    "EMA5": "EMA5",
    "EMA50": "EMA50",
    "free_cash_flow_yoy_growth_fy": "free_cash_flow_yoy_growth_fy",
    "free_cash_flow_qoq_growth_fq": "free_cash_flow_qoq_growth_fq",
    "free_cash_flow_yoy_growth_fq": "free_cash_flow_yoy_growth_fq",
    "free_cash_flow_yoy_growth_ttm": "free_cash_flow_yoy_growth_ttm",
    "free_cash_flow_margin_fy": "free_cash_flow_margin_fy",
    "free_cash_flow_margin_ttm": "free_cash_flow_margin_ttm",
    "gap": "gap",
    "goodwill": "goodwill",
    "gross_profit_margin_fy": "gross_profit_margin_fy",
    "gross_margin": "gross_margin",
    "gross_profit_yoy_growth_fy": "gross_profit_yoy_growth_fy",
    "gross_profit": "gross_profit",
    "gross_profit_fq": "gross_profit_fq",
    "gross_profit_qoq_growth_fq": "gross_profit_qoq_growth_fq",
    "gross_profit_yoy_growth_fq": "gross_profit_yoy_growth_fq",
    "gross_profit_yoy_growth_ttm": "gross_profit_yoy_growth_ttm",
    "high": "high",
    "HullMA9": "HullMA9",
    "Ichimoku.BLine": "Ichimoku.BLine",
    "Ichimoku.CLine": "Ichimoku.CLine",
    "Ichimoku.Lead1": "Ichimoku.Lead1",
    "Ichimoku.Lead2": "Ichimoku.Lead2",
    "industry": "industry",
    "KltChnl.lower": "KltChnl.lower",
    "KltChnl.upper": "KltChnl.upper",
    "last_annual_revenue": "last_annual_revenue",
    "low": "low",
    "MACD.macd": "MACD.macd",
    "MACD.signal": "MACD.signal",
    "market_cap_basic": "market_cap_basic",
    "Mom": "Mom",
    "MoneyFlow": "MoneyFlow",
    "Perf.1M": "Perf.1M",
    "Recommend.MA": "Recommend.MA",
    "ADX-DI": "ADX-DI",
    "net_debt": "net_debt",
    "net_income_yoy_growth_fy": "net_income_yoy_growth_fy",
    "net_income": "net_income",
    "net_income_qoq_growth_fq": "net_income_qoq_growth_fq",
    "net_income_yoy_growth_fq": "net_income_yoy_growth_fq",
    "net_income_yoy_growth_ttm": "net_income_yoy_growth_ttm",
    "net_income_bef_disc_oper_margin_fy": "net_income_bef_disc_oper_margin_fy",
    "after_tax_margin": "after_tax_margin",
    "number_of_employees": "number_of_employees",
    "number_of_shareholders": "number_of_shareholders",
    "open": "open",
    "oper_income_margin_fy": "oper_income_margin_fy",
    "operating_margin": "operating_margin",
    "Recommend.Other": "Recommend.Other",
    "P.SAR": "P.SAR",
    "candlestick": "candlestick",
    "Pivot.M.Camarilla.Middle": "Pivot.M.Camarilla.Middle",
    "Pivot.M.Camarilla.R1": "Pivot.M.Camarilla.R1",
    "Pivot.M.Camarilla.R2": "Pivot.M.Camarilla.R2",
    "Pivot.M.Camarilla.R3": "Pivot.M.Camarilla.R3",
    "Pivot.M.Camarilla.S1": "Pivot.M.Camarilla.S1",
    "Pivot.M.Camarilla.S2": "Pivot.M.Camarilla.S2",
    "Pivot.M.Camarilla.S3": "Pivot.M.Camarilla.S3",
    "Pivot.M.Classic.Middle": "Pivot.M.Classic.Middle",
    "Pivot.M.Classic.R1": "Pivot.M.Classic.R1",
    "Pivot.M.Classic.R2": "Pivot.M.Classic.R2",
    "Pivot.M.Classic.R3": "Pivot.M.Classic.R3",
    "Pivot.M.Classic.S1": "Pivot.M.Classic.S1",
    "Pivot.M.Classic.S2": "Pivot.M.Classic.S2",
    "Pivot.M.Classic.S3": "Pivot.M.Classic.S3",
    "Pivot.M.Demark.Middle": "Pivot.M.Demark.Middle",
    "Pivot.M.Demark.R1": "Pivot.M.Demark.R1",
    "Pivot.M.Demark.S1": "Pivot.M.Demark.S1",
    "Pivot.M.Fibonacci.Middle": "Pivot.M.Fibonacci.Middle",
    "Pivot.M.Fibonacci.R1": "Pivot.M.Fibonacci.R1",
    "Pivot.M.Fibonacci.R2": "Pivot.M.Fibonacci.R2",
    "Pivot.M.Fibonacci.R3": "Pivot.M.Fibonacci.R3",
    "Pivot.M.Fibonacci.S1": "Pivot.M.Fibonacci.S1",
    "Pivot.M.Fibonacci.S2": "Pivot.M.Fibonacci.S2",
    "Pivot.M.Fibonacci.S3": "Pivot.M.Fibonacci.S3",
    "Pivot.M.Woodie.Middle": "Pivot.M.Woodie.Middle",
    "Pivot.M.Woodie.R1": "Pivot.M.Woodie.R1",
    "Pivot.M.Woodie.R2": "Pivot.M.Woodie.R2",
    "Pivot.M.Woodie.R3": "Pivot.M.Woodie.R3",
    "Pivot.M.Woodie.S1": "Pivot.M.Woodie.S1",
    "Pivot.M.Woodie.S2": "Pivot.M.Woodie.S2",
    "Pivot.M.Woodie.S3": "Pivot.M.Woodie.S3",
    "ADX+DI": "ADX+DI",
    "postmarket_change_abs": "postmarket_change_abs",
    "postmarket_change": "postmarket_change",
    "postmarket_close": "postmarket_close",
    "postmarket_high": "postmarket_high",
    "postmarket_low": "postmarket_low",
    "postmarket_open": "postmarket_open",
    "postmarket_volume": "postmarket_volume",
    "premarket_change_abs": "premarket_change_abs",
    "premarket_change": "premarket_change",
    "premarket_change_from_open_abs": "premarket_change_from_open_abs",
    "premarket_change_from_open": "premarket_change_from_open",
    "premarket_close": "premarket_close",
    "premarket_gap": "premarket_gap",
    "premarket_high": "premarket_high",
    "premarket_low": "premarket_low",
    "premarket_open": "premarket_open",
    "premarket_volume": "premarket_volume",
    "pre_tax_margin": "pre_tax_margin",
    "close": "close",
    "price_book_ratio": "price_book_ratio",
    "price_book_fq": "price_book_fq",
    "price_earnings_ttm": "price_earnings_ttm",
    "price_free_cash_flow_ttm": "price_free_cash_flow_ttm",
    "price_revenue_ttm": "price_revenue_ttm",
    "price_sales_ratio": "price_sales_ratio",
    "quick_ratio": "quick_ratio",
    "ROC": "ROC",
    "earnings_release_date": "earnings_release_date",
    "RSI": "RSI",
    "RSI7": "RSI7",
    "relative_volume_10d_calc": "relative_volume_10d_calc",
    "relative_volume_intraday|5": "relative_volume_intraday|5",
    "research_and_dev_ratio_fy": "research_and_dev_ratio_fy",
    "research_and_dev_ratio_ttm": "research_and_dev_ratio_ttm",
    "return_on_assets": "return_on_assets",
    "return_on_equity": "return_on_equity",
    "return_on_invested_capital": "return_on_invested_capital",
    "total_revenue_yoy_growth_fy": "total_revenue_yoy_growth_fy",
    "total_revenue_qoq_growth_fq": "total_revenue_qoq_growth_fq",
    "total_revenue_yoy_growth_fq": "total_revenue_yoy_growth_fq",
    "total_revenue_yoy_growth_ttm": "total_revenue_yoy_growth_ttm",
    "revenue_per_employee": "revenue_per_employee",
    "sector": "sector",
    "sell_gen_admin_exp_other_ratio_fy": "sell_gen_admin_exp_other_ratio_fy",
    "sell_gen_admin_exp_other_ratio_ttm": "sell_gen_admin_exp_other_ratio_ttm",
    "float_shares_outstanding": "float_shares_outstanding",
    "SMA10": "SMA10",
    "SMA100": "SMA100",
    "SMA20": "SMA20",
    "SMA200": "SMA200",
    "SMA30": "SMA30",
    "SMA5": "SMA5",
    "SMA50": "SMA50",
    "Stoch.D": "Stoch.D",
    "Stoch.K": "Stoch.K",
    "Stoch.RSI.K": "Stoch.RSI.K",
    "Stoch.RSI.D": "Stoch.RSI.D",
    "submarket": "submarket",
    "Recommend.All": "Recommend.All",
    "total_assets_yoy_growth_fy": "total_assets_yoy_growth_fy",
    "total_assets": "total_assets",
    "total_assets_qoq_growth_fq": "total_assets_qoq_growth_fq",
    "total_assets_yoy_growth_fq": "total_assets_yoy_growth_fq",
    "total_current_assets": "total_current_assets",
    "total_debt_yoy_growth_fy": "total_debt_yoy_growth_fy",
    "total_debt": "total_debt",
    "total_debt_qoq_growth_fq": "total_debt_qoq_growth_fq",
    "total_debt_yoy_growth_fq": "total_debt_yoy_growth_fq",
    "total_liabilities_fy": "total_liabilities_fy",
    "total_liabilities_fq": "total_liabilities_fq",
    "total_revenue": "total_revenue",
    "total_shares_outstanding_fundamental": "total_shares_outstanding_fundamental",
    "UO": "UO",
    "earnings_release_next_date": "earnings_release_next_date",
    "Volatility.D": "Volatility.D",
    "Volatility.M": "Volatility.M",
    "Volatility.W": "Volatility.W",
    "volume": "volume",
    "VWAP": "VWAP",
    "VWMA": "VWMA",
    "Value.Traded": "Value.Traded",
    "Perf.W": "Perf.W",
    "W.R": "W.R",
    "Perf.Y": "Perf.Y",
    "Perf.YTD": "Perf.YTD",
    "type": "type",
    "subtype": "subtype",
    "name": "name",
    "logoid": "logoid",
    "description": "description",
}
API_SETTINGS = {
    "filter": [
        # {'left': 'type', 'operation': 'equal', 'right': 'stock'},
        # {'left': 'subtype', 'operation': 'in_range', 'right': ['common', 'foreign-issuer']},
        {
            "left": "exchange",
            "operation": "in_range",
            "right": ["AMEX", "NASDAQ", "NYSE", "ARCA"],
        }
    ],
    "options": {"lang": "en"},
    "markets": ["america"],
    "symbols": {"query": {"types": []}, "tickers": []},
    "columns": ["name", "sector", "industry", "close", "volume", "market_cap_basic"],
    # 'sort': {},  # the sortBy value should be replaced with a column name
    "range": [0, 10000000],
}


class Scanner(dict, Enum):
    premarket_gainers = {"sortBy": "premarket_change", "sortOrder": "desc"}
    premarket_losers = {"sortBy": "premarket_change", "sortOrder": "asc"}
    premarket_most_active = {"sortBy": "premarket_volume", "sortOrder": "desc"}
    premarket_gappers = {"sortBy": "premarket_gap", "sortOrder": "desc"}

    postmarket_gainers = {"sortBy": "postmarket_change", "sortOrder": "desc"}
    postmarket_losers = {"sortBy": "postmarket_change", "sortOrder": "asc"}
    postmarket_most_active = {"sortBy": "postmarket_volume", "sortOrder": "desc"}

    @classmethod
    def names(cls) -> list[str]:
        return [x.name for x in cls]

    def get_data(self, **kwargs) -> pd.DataFrame:
        cols = API_SETTINGS["columns"].copy()
        cols.insert(
            1, self.value["sortBy"]
        )  # insert the column that we are sorting by, right after the symbol column
        kwargs.setdefault(
            "columns", cols
        )  # use `setdefault()` so the user can override this
        return get_scanner_data(sort=self.value, **kwargs)[1]


def get_scanner_data(**kwargs) -> tuple[int, pd.DataFrame]:
    """
    Get a dataframe with the scanner data directly from the API

    :param kwargs: kwargs to override fields in the `local_settings` dictionary
    :return: Pandas DataFrame
    """
    local_settings = (
        API_SETTINGS.copy()
    )  # copy() to avoid modifying the global settings
    local_settings.update(**kwargs)

    r = requests.post(URL, headers=HEADERS, data=json.dumps(local_settings))
    r.raise_for_status()
    json_obj = r.json()
    rows_count = json_obj["totalCount"]
    data = json_obj["data"]
    if data is None:
        return rows_count, pd.DataFrame(columns=local_settings["columns"])
    return rows_count, pd.DataFrame(
        data=(row["d"] for row in data), columns=local_settings["columns"]
    )


def get_all_symbols(
    exchanges: Iterable[str] = ("AMEX", "OTC", "NYSE", "NASDAQ")
) -> list[str]:
    """
    Get a list with all the symbols filtered by a given exchange.

    Valid exchanges: {'AMEX', 'OTC', 'NYSE', 'NASDAQ'}

    :param exchanges: a set which contains the exchanges you want to keep (all the rest will be ignored)
    :return: list of symbols
    """
    exchanges = {x.upper() for x in exchanges}
    r = requests.get(URL)
    data = r.json()[
        "data"
    ]  # [{'s': 'NYSE:HKD', 'd': []}, {'s': 'NASDAQ:ALTY', 'd': []}...]

    res = []
    for dct in data:
        exchange, symbol = dct["s"].split(":")
        if exchange in exchanges:
            res.append((symbol, exchange))
    return res
